name: Build and Release

on:
  push:
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:

env:
  PROJECT_NAME: FerrisPad
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install FLTK dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfltk1.3-dev libfontconfig1-dev libxext-dev \
            libxft-dev libxinerama-dev libxcursor-dev libxrender-dev \
            libxfixes-dev libpango1.0-dev libgl1-mesa-dev libglu1-mesa-dev

      - name: Build binary
        run: cargo build --release --verbose

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Create .deb package
        run: cargo deb

      - name: Rename .deb file
        run: |
          DEB_FILE=$(find target/debian -name "*.deb" -type f | head -n 1)
          mv "$DEB_FILE" "${{ env.PROJECT_NAME }}-v${{ steps.get_version.outputs.version }}-ubuntu-amd64.deb"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: ${{ env.PROJECT_NAME }}-v${{ steps.get_version.outputs.version }}-ubuntu-amd64.deb

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build binary
        run: cargo build --release --verbose

      - name: Create zip archive
        run: |
          cd target/release
          7z a ../../${{ env.PROJECT_NAME }}-v${{ steps.get_version.outputs.version }}-windows-x64.zip ${{ env.PROJECT_NAME }}.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: ${{ env.PROJECT_NAME }}-v${{ steps.get_version.outputs.version }}-windows-x64.zip

  build-macos:
    runs-on: macos-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Build universal binary
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
          mkdir -p target/universal/release
          lipo -create \
            target/x86_64-apple-darwin/release/${{ env.PROJECT_NAME }} \
            target/aarch64-apple-darwin/release/${{ env.PROJECT_NAME }} \
            -output target/universal/release/${{ env.PROJECT_NAME }}

      - name: Create .app bundle
        run: |
          APP_BUNDLE="${{ env.PROJECT_NAME }}.app"
          mkdir -p "${APP_BUNDLE}/Contents/MacOS"
          mkdir -p "${APP_BUNDLE}/Contents/Resources"
          cp target/universal/release/${{ env.PROJECT_NAME }} "${APP_BUNDLE}/Contents/MacOS/"

          cat > "${APP_BUNDLE}/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>${{ env.PROJECT_NAME }}</string>
              <key>CFBundleIdentifier</key>
              <string>com.ferrispad.editor</string>
              <key>CFBundleName</key>
              <string>${{ env.PROJECT_NAME }}</string>
              <key>CFBundleVersion</key>
              <string>${{ steps.get_version.outputs.version }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ steps.get_version.outputs.version }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleIconFile</key>
              <string>icon.icns</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Create .icns icon
        run: |
          if [ -f "docs/assets/logo-transparent.png" ]; then
            # Install ImageMagick for better icon processing
            brew install imagemagick

            ICONSET_DIR="${{ env.PROJECT_NAME }}.iconset"
            mkdir -p "$ICONSET_DIR"

            # Function to create macOS-style icon with background and rounded corners
            create_macos_icon() {
              local size=$1
              local output=$2
              local radius=$((size / 5))  # macOS-like squircle radius

              # Create icon with gradient background, centered logo, and rounded corners
              magick -size ${size}x${size} \
                gradient:'#FF6B35-#F7931E' \
                \( docs/assets/logo-transparent.png -resize $((size * 70 / 100))x$((size * 70 / 100)) \) \
                -gravity center -composite \
                \( +clone -alpha extract \
                   -draw "fill black polygon 0,0 0,${radius} ${radius},0 fill white circle ${radius},${radius} ${radius},0" \
                   \( +clone -flip \) -compose Multiply -composite \
                   \( +clone -flop \) -compose Multiply -composite \
                \) -alpha off -compose CopyOpacity -composite \
                "$output"
            }

            # Generate all required icon sizes
            create_macos_icon 16 "${ICONSET_DIR}/icon_16x16.png"
            create_macos_icon 32 "${ICONSET_DIR}/icon_16x16@2x.png"
            create_macos_icon 32 "${ICONSET_DIR}/icon_32x32.png"
            create_macos_icon 64 "${ICONSET_DIR}/icon_32x32@2x.png"
            create_macos_icon 128 "${ICONSET_DIR}/icon_128x128.png"
            create_macos_icon 256 "${ICONSET_DIR}/icon_128x128@2x.png"
            create_macos_icon 256 "${ICONSET_DIR}/icon_256x256.png"
            create_macos_icon 512 "${ICONSET_DIR}/icon_256x256@2x.png"
            create_macos_icon 512 "${ICONSET_DIR}/icon_512x512.png"
            create_macos_icon 1024 "${ICONSET_DIR}/icon_512x512@2x.png"

            iconutil -c icns "$ICONSET_DIR" -o "${{ env.PROJECT_NAME }}.app/Contents/Resources/icon.icns"
            rm -rf "$ICONSET_DIR"
          fi

      - name: Create DMG
        run: |
          create-dmg \
            --volname "${{ env.PROJECT_NAME }}" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "${{ env.PROJECT_NAME }}.app" 175 190 \
            --hide-extension "${{ env.PROJECT_NAME }}.app" \
            --app-drop-link 425 190 \
            "${{ env.PROJECT_NAME }}-v${{ steps.get_version.outputs.version }}-macos.dmg" \
            "${{ env.PROJECT_NAME }}.app" || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: ${{ env.PROJECT_NAME }}-v${{ steps.get_version.outputs.version }}-macos.dmg

  create-release:
    needs: [build-linux, build-windows, build-macos]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          if [[ "$VERSION" =~ -(alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: FerrisPad v${{ steps.get_version.outputs.version }}
          body: |
            ## ü¶Ä FerrisPad v${{ steps.get_version.outputs.version }}

            Automated release build. Please add release notes by editing this release.

            ### üì¶ Downloads

            - **Linux**: Ubuntu/Debian `.deb` package
            - **Windows**: Portable `.zip` archive
            - **macOS**: Universal `.dmg` installer (Intel + Apple Silicon)

            ### üìù Installation

            See the [Installation Guide](https://github.com/fedro86/ferrispad#installation) for detailed instructions.
          draft: false
          prerelease: ${{ steps.get_version.outputs.is_prerelease }}
          files: |
            artifacts/linux-deb/*
            artifacts/windows-zip/*
            artifacts/macos-dmg/*
